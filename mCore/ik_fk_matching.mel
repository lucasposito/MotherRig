global string $switch_ctr = "SwitchIKFK";
global string $switch_attr = "IKFK";

global string $fk_root_ctr = "Arm_ctr";
global string $fk_mid_ctr = "ForeArm_ctr";
global string $fk_end_ctr = "Hand_ctr";

global string $ik_root_jnt = "Arm_IK";
global string $ik_mid_jnt = "ForeArm_IK";

global string $ik_mid_ctr = "ForeArm_IK_ctr";
global string $ik_end_ctr = "Hand_IK_ctr";


proc int check_keys(){
    global string $fk_root_ctr;
    global string $fk_mid_ctr;
    global string $ik_mid_ctr;

    float $fk_root_rot[] = `keyframe -at "rotate" -q -vc $fk_root_ctr`;
    float $fk_mid_rot[] = `keyframe -at "rotate" -q -vc $fk_mid_ctr`;
    float $ik_mid_tra[] = `keyframe -at "translate" -q -vc $ik_mid_ctr`;
    

    if (size($fk_root_rot) || size($fk_mid_rot) || size($ik_mid_tra)){
        return 1;
    }
    return 0;
}


proc float[] pole_vector(float $root[], float $mid[], float $end[]){
    vector $point_a = <<$root[0], $root[1], $root[2]>>;
    vector $point_b = <<$mid[0], $mid[1], $mid[2]>>;
    vector $point_c = <<$end[0], $end[1], $end[2]>>;

    vector $vector_ac = $point_c - $point_a;
    vector $vector_ab = $point_b - $point_a;

    vector $normal_ac = unit($vector_ac);

    float $projLength = dot($vector_ab, $normal_ac);
    vector $mid_vector = ($normal_ac * $projLength) + $point_a;

    vector $pole_vector = $point_b - $mid_vector;
    vector $normal_pole = unit($pole_vector);

    float $length = mag($vector_ab);
    vector $final_pole = $point_b + ($normal_pole * $length);

    float $pole_position[] = {$final_pole.x, $final_pole.y, $final_pole.z};
    return $pole_position;
}


proc match_tip(int $fk){
    global string $fk_end_ctr;
    global string $ik_end_ctr;
    string $driver;
    string $driven;


    if (!$fk){
        $driver = $fk_end_ctr;
        $driven = $ik_end_ctr;
    } else {
        $driver = $ik_end_ctr;
        $driven = $fk_end_ctr;
    }

    string $temp_constraint[] = `parentConstraint $driver $driven`;

    float $translate[] = `keyframe -at "translate" -q -vc $driven`;
    float $rotate[] = `keyframe -at "rotate" -q -vc $driven`;

    if (size($translate) || size($rotate)){
        setKeyframe -at "translate" -hi none -s 0 $driven;
        setKeyframe -at "rotate" -hi none -s 0 $driven;
    }

    delete $temp_constraint;
}


proc int match_ik_to_fk(){
    global string $switch_ctr;
    global string $switch_attr;
    int $switch = `getAttr ($switch_ctr + "." + $switch_attr)`;
    if ($switch){
        return 0;
    }

    global string $fk_root_ctr;
    global string $fk_mid_ctr;
    global string $fk_end_ctr;
    global string $ik_mid_ctr;

    float $root_pos[] = `xform -q -ws -piv $fk_root_ctr`;
    float $mid_pos[] = `xform -q -ws -piv $fk_mid_ctr`;
    float $end_pos[] = `xform -q -ws -piv $fk_end_ctr`;

    float $pole_position[] = pole_vector($root_pos, $mid_pos, $end_pos);
    move $pole_position[0] $pole_position[1] $pole_position[2] $ik_mid_ctr;
    if (check_keys()){
        setKeyframe -at "translate" -hi none -s 0 $ik_mid_ctr;
    }
    match_tip(false);
    return 1;
}


proc int match_fk_to_ik(){
    global string $switch_ctr;
    global string $switch_attr;
    int $switch = `getAttr ($switch_ctr + "." + $switch_attr)`;
    if (!$switch){
        return 1;
    }

    global string $fk_root_ctr;
    global string $fk_mid_ctr;
    global string $ik_root_jnt;
    global string $ik_mid_jnt;

    float $root_rot[] = `getAttr ($ik_root_jnt + ".rotate")`;
    float $mid_rot[] = `getAttr ($ik_mid_jnt + ".rotate")`;

    setAttr ($fk_root_ctr + ".rotate") $root_rot[0] $root_rot[1] $root_rot[2];
    setAttr ($fk_mid_ctr + ".rotate") $mid_rot[0] $mid_rot[1] $mid_rot[2];
    if (check_keys()){
        setKeyframe -at "rotate" -hi none -s 0 $fk_root_ctr;
        setKeyframe -at "rotate" -hi none -s 0 $fk_mid_ctr;
    }
    match_tip(true);
    return 0;
}

int $fk_root_job = `scriptJob -attributeChange ($fk_root_ctr + ".rotate") "match_ik_to_fk"`;
int $fk_mid_job = `scriptJob -attributeChange ($fk_mid_ctr + ".rotate") "match_ik_to_fk"`;
int $fk_end_job = `scriptJob -attributeChange ($fk_end_ctr + ".rotate") "match_ik_to_fk"`;

int $ik_mid_job = `scriptJob -attributeChange ($ik_mid_ctr + ".translate") "match_fk_to_ik"`;
int $ik_end_tra_job = `scriptJob -attributeChange ($ik_end_ctr + ".translate") "match_fk_to_ik"`;
int $ik_end_rot_job = `scriptJob -attributeChange ($ik_end_ctr + ".rotate") "match_fk_to_ik"`;
